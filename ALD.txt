-------------KNAPSACK-----------

#include<bits/stdc++.h>
using namespace std;
float w[1000],p[1000],x[1000];

void knapsack(int m,int n)
{
    for(int i=0; i<n; i++)
    {
        int Max=i;
        for(int j=i+1; j<n; j++)
        {
            if(p[j]/w[j]>p[Max]/w[Max])
            {
                Max=j;
            }
            swap(p[Max],p[i]);
            swap(w[Max],w[i]);
        }

    }
    int i;
    int u=m;
    for( i=0; i<n; i++)
    {
        if(w[i]>u)
            break;
        x[i]=1;
        u=u-w[i];
    }
    if ( i<n)
    {
        x[i]=u/w[i];
    }
}

void profit_calculation(int n)
{
    float sum=0;
    for(int i=0; i<n; i++)
    {
        sum=sum+(x[i]*p[i]);
    }
    cout<<sum;
}
int main()
{
    int n;
    cout<<"Enter the number of item:";
    cin>>n;
    cout<<endl<<"The set of weight:";
    for(int i=0; i<n; i++)
    {
        cin>>w[i];
    }
    cout<<endl;
    cout<<endl<<"The set of profite:";
    for(int i=0; i<n; i++)
    {
        cin>>p[i];
    }
    knapsack(60,n);
    cout<<endl;
    cout<<"The set of weight of unite per profite::";
    for(int i=0; i<n; i++)
    {
        cout<<w[i]<<"  ";
    }

    cout<<endl<<"The set of profit of unite per profite::";
    for(int i=0; i<n; i++)
    {
        cout<<p[i]<<"  ";
    }
    cout<<endl<<"Total profit is:";
    profit_calculation(4);
    return 0;
}


--------------job sequencing------------------

#include<bits/stdc++.h>
using namespace std;
int n,m;

int main()
{
    vector<pair<int,pair<int,int>>>v;
    cout<<"enter the value and deadline for 5 data: ";
    for(int i=0; i<5; i++)
    {
        int vv;
        int d;
        cin >> vv >> d;
        v.push_back({vv,{d,i+1}});
    }
    sort(v.rbegin(),v.rend());

    int ar[10]= {0};
    int arr[10]= {0};

    for(int i=0; i<5; i++)
    {
        int deadline = v[i].second.first;

        for(int j= deadline ; j>=1; j--)
        {
            if(ar[j]==0)
            {
                ar[j]=v[i].first;
                arr[j]=v[i].second.second;
                break;
            }
        }
    }
    int to=0;
    for(auto i:arr)
    {
        if(i)cout<<i<<" ->";
    }
    cout<<endl;
    for(auto i:ar)to+=i;
    cout<<to<<endl;
}


-----------------sum of subset------------------

#include<iostream>
    using namespace std;

        void subsetsum_Backtracking(int Set[] , int pos, int sum, int tmpsum, int size, bool & found)
        {
            if (sum == tmpsum)
                found = true;
                for (int i = pos; i < size; i++)
            {
             if (tmpsum + Set[i] <= sum)
               {
                  tmpsum += Set[i];
                  subsetsum_Backtracking(Set, i + 1, sum, tmpsum, size, found);
                  tmpsum -= Set[i];
                }
            }
        }

    int main()
    {
        int i, n, sum;

        cout << "Enter the number of elements in the set" << endl;
        cin >> n;
        int a[n];
        cout << "Enter the values" << endl;
        for(i=0;i<n;i++)
          cin>>a[i];
        cout << "Enter the value of sum" << endl;
        cin >> sum;
        bool f = false;
        subsetsum_Backtracking(a, 0, sum, 0, n, f);
        if (f)
           cout << "subset with the given sum found" << endl;
        else
           cout << "no required subset found" << endl;
        return 0;
    }



--------------N-Queens--------------

#include <bits/stdc++.h>
using namespace std;
bool isSafe(vector<vector<int>> &board, int row, int col, int n) {
    for (int i = 0; i < row; i++) {
      if(board[i][col] == 1) return false;
    }
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
      if(board[i][j] == 1) return false;
    }
    for (int i = row, j = col; i >= 0 && j < n; i--, j++) {
      if(board[i][j] == 1) return false;
    }
    return true;
}

void prettyPrint(vector<vector<int>> &board) {

    for (int i = 0; i < board.size(); i++) {
        cout << endl;
        for (int j = 0; j < board[i].size(); j++) {
            if (board[i][j] == 1) cout << "Q ";
            else cout <<  "* ";
        }
    }
    cout<<endl;
}

bool solveNQueen(vector<vector<int>> &board, int i, int n, int &count) {
    if(i == n) {
      prettyPrint(board);
      count++;
      return true;
    }

    for (int j = 0; j < n; j++) {
        if (isSafe(board, i, j, n)) {
            board[i][j] = 1;
            bool isNextSafeToPlace = solveNQueen(board, i + 1, n, count);

            board[i][j] = 0;
        }
    }

    return false;
}

int main() {

    cout << "\nThis program finds out positions of N - Queens.\n" << endl;
    int size, queens;
    cout << "Enter the size of chess board : \n";
    cin >> size;

    int count = 0;

    vector<vector<int>> board(size, vector<int>(size, 0));

    solveNQueen(board, 0, size, count);

    cout<<endl<<count<<endl;
    return 0;
}


------------------LCS------------------

#include <iostream>
#include <string.h>
using namespace std;
int max(int a, int b);
int lcs(char* X, char* Y, int m, int n){
   if (m == 0 || n == 0)
      return 0;
   if (X[m - 1] == Y[n - 1])
      return 1 + lcs(X, Y, m - 1, n - 1);
   else
      return max(lcs(X, Y, m, n - 1), lcs(X, Y, m - 1, n));
}
int max(int a, int b){
   return (a > b) ? a : b;
}
int main(){
   char X[] = "AGGTAB";
   char Y[] = "GXTXAYB";
   int m = strlen(X);
   int n = strlen(Y);
   printf("Length of LCS is %d\n", lcs(X, Y, m, n));
   return 0;
}



----------dijkstra-------------

#include<bits/stdc++.h>
using namespace std;

int visited[1000];
int dist[1000];
int cost[1000][1000];

vector<int>v[1000];

int main()
{
    int n,e;
    cout<<"enter vertics and edge number: ";
    cin >> n >> e;
    cout<<"enter all connected edge : "<<endl;
    for(int i=1; i<=e; i++)
    {
        int x,y,w;
        cin >> x  >> y >> w;
        cost[x][y]=w;
        cost[y][x]=w;

        v[x].push_back(y);
        v[y].push_back(x);
    }

    for(int i=1; i<=n+3; i++)dist[i]=1000;

    dist[1]=0;

    set<pair<int,int>>st;
    st.insert({0,1});

    while(st.size()>0)
    {
        int nod = (*st.begin()).second;
        st.erase(st.begin());

        if(visited[nod]==0)
        {
            visited[nod]=1;
            for(int i:v[nod])
            {
                if(visited[i]==1)continue;
                if(dist[i]>dist[nod]+cost[nod][i])
                {
                    dist[i] = dist[nod]+cost[i][nod];
                    st.insert({dist[i],i});

                }
            }
        }
    }
    cout<<"\n";
    for(int i=1; i<=n ;i++)
        cout<<i<<": "<<dist[i]<<"\n";
}





